import{p as Q}from"./chunk-4BMEZGHF.Uk8EinRB.js";import{I as X}from"./chunk-XZIHB7SX.CwhpLyNM.js";import{_ as d,q as Z,p as rr,s as tr,g as er,a as or,b as ar,l as w,c as nr,d as cr,u as ir,C as sr,y as hr,k as C,D as dr,E as mr,F as $r,G as lr}from"../app.CVzzZfDj.js";import{p as gr}from"./radar-MK3ICKWK.DsulwHXA.js";import"./framework.BTHFNYH-.js";import"./isIterateeCall.DmV5WHBc.js";import"./theme.GtFjoDy6.js";import"./baseUniq.C3QhOezH.js";import"./isSymbol.DYPLY1nq.js";import"./basePickBy.C3sJQPRV.js";import"./toFinite.CaWsV0a4.js";import"./clone.CfLH4KiQ.js";var p={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},yr=$r.gitGraph,A=d(()=>dr({...yr,...mr().gitGraph}),"getConfig"),s=new X(()=>{const t=A(),r=t.mainBranchName,o=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:o}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}});function H(){return lr({length:7})}d(H,"getID");function _(t,r){const o=Object.create(null);return t.reduce((n,e)=>{const a=r(e);return o[a]||(o[a]=!0,n.push(e)),n},[])}d(_,"uniqBy");var pr=d(function(t){s.records.direction=t},"setDirection"),fr=d(function(t){w.debug("options str",t),t=t==null?void 0:t.trim(),t=t||"{}";try{s.records.options=JSON.parse(t)}catch(r){w.error("error while parsing gitGraph options",r.message)}},"setOptions"),xr=d(function(){return s.records.options},"getOptions"),ur=d(function(t){let r=t.msg,o=t.id;const n=t.type;let e=t.tags;w.info("commit",r,o,n,e),w.debug("Entering commit:",r,o,n,e);const a=A();o=C.sanitizeText(o,a),r=C.sanitizeText(r,a),e=e==null?void 0:e.map(c=>C.sanitizeText(c,a));const i={id:o||s.records.seq+"-"+H(),message:r,seq:s.records.seq++,type:n??p.NORMAL,tags:e??[],parents:s.records.head==null?[]:[s.records.head.id],branch:s.records.currBranch};s.records.head=i,w.info("main branch",a.mainBranchName),s.records.commits.set(i.id,i),s.records.branches.set(s.records.currBranch,i.id),w.debug("in pushCommit "+i.id)},"commit"),br=d(function(t){let r=t.name;const o=t.order;if(r=C.sanitizeText(r,A()),s.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);s.records.branches.set(r,s.records.head!=null?s.records.head.id:null),s.records.branchConfig.set(r,{name:r,order:o}),F(r),w.debug("in createBranch")},"branch"),wr=d(t=>{let r=t.branch,o=t.id;const n=t.type,e=t.tags,a=A();r=C.sanitizeText(r,a),o&&(o=C.sanitizeText(o,a));const i=s.records.branches.get(s.records.currBranch),c=s.records.branches.get(r),m=i?s.records.commits.get(i):void 0,l=c?s.records.commits.get(c):void 0;if(m&&l&&m.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(s.records.currBranch===r){const h=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw h.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},h}if(m===void 0||!m){const h=new Error(`Incorrect usage of "merge". Current branch (${s.records.currBranch})has no commits`);throw h.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},h}if(!s.records.branches.has(r)){const h=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw h.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},h}if(l===void 0||!l){const h=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw h.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},h}if(m===l){const h=new Error('Incorrect usage of "merge". Both branches have same head');throw h.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},h}if(o&&s.records.commits.has(o)){const h=new Error('Incorrect usage of "merge". Commit with id:'+o+" already exists, use different custom Id");throw h.hash={text:`merge ${r} ${o} ${n} ${e==null?void 0:e.join(" ")}`,token:`merge ${r} ${o} ${n} ${e==null?void 0:e.join(" ")}`,expected:[`merge ${r} ${o}_UNIQUE ${n} ${e==null?void 0:e.join(" ")}`]},h}const $=c||"",g={id:o||`${s.records.seq}-${H()}`,message:`merged branch ${r} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,$],branch:s.records.currBranch,type:p.MERGE,customType:n,customId:!!o,tags:e??[]};s.records.head=g,s.records.commits.set(g.id,g),s.records.branches.set(s.records.currBranch,g.id),w.debug(s.records.branches),w.debug("in mergeBranch")},"merge"),Br=d(function(t){let r=t.id,o=t.targetId,n=t.tags,e=t.parent;w.debug("Entering cherryPick:",r,o,n);const a=A();if(r=C.sanitizeText(r,a),o=C.sanitizeText(o,a),n=n==null?void 0:n.map(m=>C.sanitizeText(m,a)),e=C.sanitizeText(e,a),!r||!s.records.commits.has(r)){const m=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw m.hash={text:`cherryPick ${r} ${o}`,token:`cherryPick ${r} ${o}`,expected:["cherry-pick abc"]},m}const i=s.records.commits.get(r);if(i===void 0||!i)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(e&&!(Array.isArray(i.parents)&&i.parents.includes(e)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const c=i.branch;if(i.type===p.MERGE&&!e)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!o||!s.records.commits.has(o)){if(c===s.records.currBranch){const g=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw g.hash={text:`cherryPick ${r} ${o}`,token:`cherryPick ${r} ${o}`,expected:["cherry-pick abc"]},g}const m=s.records.branches.get(s.records.currBranch);if(m===void 0||!m){const g=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${r} ${o}`,token:`cherryPick ${r} ${o}`,expected:["cherry-pick abc"]},g}const l=s.records.commits.get(m);if(l===void 0||!l){const g=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${r} ${o}`,token:`cherryPick ${r} ${o}`,expected:["cherry-pick abc"]},g}const $={id:s.records.seq+"-"+H(),message:`cherry-picked ${i==null?void 0:i.message} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,i.id],branch:s.records.currBranch,type:p.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${i.id}${i.type===p.MERGE?`|parent:${e}`:""}`]};s.records.head=$,s.records.commits.set($.id,$),s.records.branches.set(s.records.currBranch,$.id),w.debug(s.records.branches),w.debug("in cherryPick")}},"cherryPick"),F=d(function(t){if(t=C.sanitizeText(t,A()),s.records.branches.has(t)){s.records.currBranch=t;const r=s.records.branches.get(s.records.currBranch);r===void 0||!r?s.records.head=null:s.records.head=s.records.commits.get(r)??null}else{const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}},"checkout");function D(t,r,o){const n=t.indexOf(r);n===-1?t.push(o):t.splice(n,1,o)}d(D,"upsert");function N(t){const r=t.reduce((e,a)=>e.seq>a.seq?e:a,t[0]);let o="";t.forEach(function(e){e===r?o+="	*":o+="	|"});const n=[o,r.id,r.seq];for(const e in s.records.branches)s.records.branches.get(e)===r.id&&n.push(e);if(w.debug(n.join(" ")),r.parents&&r.parents.length==2&&r.parents[0]&&r.parents[1]){const e=s.records.commits.get(r.parents[0]);D(t,r,e),r.parents[1]&&t.push(s.records.commits.get(r.parents[1]))}else{if(r.parents.length==0)return;if(r.parents[0]){const e=s.records.commits.get(r.parents[0]);D(t,r,e)}}t=_(t,e=>e.id),N(t)}d(N,"prettyPrintCommitHistory");var Er=d(function(){w.debug(s.records.commits);const t=K()[0];N([t])},"prettyPrint"),kr=d(function(){s.reset(),hr()},"clear"),Cr=d(function(){return[...s.records.branchConfig.values()].map((t,r)=>t.order!==null&&t.order!==void 0?t:{...t,order:parseFloat(`0.${r}`)}).sort((t,r)=>(t.order??0)-(r.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),Lr=d(function(){return s.records.branches},"getBranches"),Tr=d(function(){return s.records.commits},"getCommits"),K=d(function(){const t=[...s.records.commits.values()];return t.forEach(function(r){w.debug(r.id)}),t.sort((r,o)=>r.seq-o.seq),t},"getCommitsArray"),Mr=d(function(){return s.records.currBranch},"getCurrentBranch"),vr=d(function(){return s.records.direction},"getDirection"),Pr=d(function(){return s.records.head},"getHead"),Y={commitType:p,getConfig:A,setDirection:pr,setOptions:fr,getOptions:xr,commit:ur,branch:br,merge:wr,cherryPick:Br,checkout:F,prettyPrint:Er,clear:kr,getBranchesAsObjArray:Cr,getBranches:Lr,getCommits:Tr,getCommitsArray:K,getCurrentBranch:Mr,getDirection:vr,getHead:Pr,setAccTitle:ar,getAccTitle:or,getAccDescription:er,setAccDescription:tr,setDiagramTitle:rr,getDiagramTitle:Z},Rr=d((t,r)=>{Q(t,r),t.dir&&r.setDirection(t.dir);for(const o of t.statements)Ir(o,r)},"populate"),Ir=d((t,r)=>{const o={Commit:d(n=>r.commit(Ar(n)),"Commit"),Branch:d(n=>r.branch(Gr(n)),"Branch"),Merge:d(n=>r.merge(Or(n)),"Merge"),Checkout:d(n=>r.checkout(qr(n)),"Checkout"),CherryPicking:d(n=>r.cherryPick(Hr(n)),"CherryPicking")}[t.$type];o?o(t):w.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),Ar=d(t=>({id:t.id,msg:t.message??"",type:t.type!==void 0?p[t.type]:p.NORMAL,tags:t.tags??void 0}),"parseCommit"),Gr=d(t=>({name:t.name,order:t.order??0}),"parseBranch"),Or=d(t=>({branch:t.branch,id:t.id??"",type:t.type!==void 0?p[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),qr=d(t=>t.branch,"parseCheckout"),Hr=d(t=>{var r;return{id:t.id,targetId:"",tags:((r=t.tags)==null?void 0:r.length)===0?void 0:t.tags,parent:t.parent}},"parseCherryPicking"),zr={parse:d(async t=>{const r=await gr("gitGraph",t);w.debug(r),Rr(r,Y)},"parse")},W=nr(),x=W==null?void 0:W.gitGraph,v=10,P=40,L=4,T=2,G=8,E=new Map,k=new Map,z=30,O=new Map,S=[],R=0,y="LR",Sr=d(()=>{E.clear(),k.clear(),O.clear(),R=0,S=[],y="LR"},"clear"),U=d(t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof t=="string"?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(o=>{const n=document.createElementNS("http://www.w3.org/2000/svg","tspan");n.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),n.setAttribute("dy","1em"),n.setAttribute("x","0"),n.setAttribute("class","row"),n.textContent=o.trim(),r.appendChild(n)}),r},"drawText"),V=d(t=>{let r,o,n;return y==="BT"?(o=d((e,a)=>e<=a,"comparisonFunc"),n=1/0):(o=d((e,a)=>e>=a,"comparisonFunc"),n=0),t.forEach(e=>{var i,c;const a=y==="TB"||y=="BT"?(i=k.get(e))==null?void 0:i.y:(c=k.get(e))==null?void 0:c.x;a!==void 0&&o(a,n)&&(r=e,n=a)}),r},"findClosestParent"),Dr=d(t=>{let r="",o=1/0;return t.forEach(n=>{const e=k.get(n).y;e<=o&&(r=n,o=e)}),r||void 0},"findClosestParentBT"),Nr=d((t,r,o)=>{let n=o,e=o;const a=[];t.forEach(i=>{const c=r.get(i);if(!c)throw new Error(`Commit not found for key ${i}`);c.parents.length?(n=jr(c),e=Math.max(n,e)):a.push(c),_r(c,n)}),n=e,a.forEach(i=>{Fr(i,n,o)}),t.forEach(i=>{const c=r.get(i);if(c!=null&&c.parents.length){const m=Dr(c.parents);n=k.get(m).y-P,n<=e&&(e=n);const l=E.get(c.branch).pos,$=n-v;k.set(c.id,{x:l,y:$})}})},"setParallelBTPos"),Wr=d(t=>{var n;const r=V(t.parents.filter(e=>e!==null));if(!r)throw new Error(`Closest parent not found for commit ${t.id}`);const o=(n=k.get(r))==null?void 0:n.y;if(o===void 0)throw new Error(`Closest parent position not found for commit ${t.id}`);return o},"findClosestParentPos"),jr=d(t=>Wr(t)+P,"calculateCommitPosition"),_r=d((t,r)=>{const o=E.get(t.branch);if(!o)throw new Error(`Branch not found for commit ${t.id}`);const n=o.pos,e=r+v;return k.set(t.id,{x:n,y:e}),{x:n,y:e}},"setCommitPosition"),Fr=d((t,r,o)=>{const n=E.get(t.branch);if(!n)throw new Error(`Branch not found for commit ${t.id}`);const e=r+o,a=n.pos;k.set(t.id,{x:a,y:e})},"setRootPosition"),Kr=d((t,r,o,n,e,a)=>{if(a===p.HIGHLIGHT)t.append("rect").attr("x",o.x-10).attr("y",o.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${e%G} ${n}-outer`),t.append("rect").attr("x",o.x-6).attr("y",o.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${e%G} ${n}-inner`);else if(a===p.CHERRY_PICK)t.append("circle").attr("cx",o.x).attr("cy",o.y).attr("r",10).attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",o.x-3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",o.x+3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",o.x+3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",o.x-3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`);else{const i=t.append("circle");if(i.attr("cx",o.x),i.attr("cy",o.y),i.attr("r",r.type===p.MERGE?9:10),i.attr("class",`commit ${r.id} commit${e%G}`),a===p.MERGE){const c=t.append("circle");c.attr("cx",o.x),c.attr("cy",o.y),c.attr("r",6),c.attr("class",`commit ${n} ${r.id} commit${e%G}`)}a===p.REVERSE&&t.append("path").attr("d",`M ${o.x-5},${o.y-5}L${o.x+5},${o.y+5}M${o.x-5},${o.y+5}L${o.x+5},${o.y-5}`).attr("class",`commit ${n} ${r.id} commit${e%G}`)}},"drawCommitBullet"),Yr=d((t,r,o,n)=>{var e;if(r.type!==p.CHERRY_PICK&&(r.customId&&r.type===p.MERGE||r.type!==p.MERGE)&&(x!=null&&x.showCommitLabel)){const a=t.append("g"),i=a.insert("rect").attr("class","commit-label-bkg"),c=a.append("text").attr("x",n).attr("y",o.y+25).attr("class","commit-label").text(r.id),m=(e=c.node())==null?void 0:e.getBBox();if(m&&(i.attr("x",o.posWithOffset-m.width/2-T).attr("y",o.y+13.5).attr("width",m.width+2*T).attr("height",m.height+2*T),y==="TB"||y==="BT"?(i.attr("x",o.x-(m.width+4*L+5)).attr("y",o.y-12),c.attr("x",o.x-(m.width+4*L)).attr("y",o.y+m.height-12)):c.attr("x",o.posWithOffset-m.width/2),x.rotateCommitLabel))if(y==="TB"||y==="BT")c.attr("transform","rotate(-45, "+o.x+", "+o.y+")"),i.attr("transform","rotate(-45, "+o.x+", "+o.y+")");else{const l=-7.5-(m.width+10)/25*9.5,$=10+m.width/25*8.5;a.attr("transform","translate("+l+", "+$+") rotate(-45, "+n+", "+o.y+")")}}},"drawCommitLabel"),Ur=d((t,r,o,n)=>{var e;if(r.tags.length>0){let a=0,i=0,c=0;const m=[];for(const l of r.tags.reverse()){const $=t.insert("polygon"),g=t.append("circle"),h=t.append("text").attr("y",o.y-16-a).attr("class","tag-label").text(l),f=(e=h.node())==null?void 0:e.getBBox();if(!f)throw new Error("Tag bbox not found");i=Math.max(i,f.width),c=Math.max(c,f.height),h.attr("x",o.posWithOffset-f.width/2),m.push({tag:h,hole:g,rect:$,yOffset:a}),a+=20}for(const{tag:l,hole:$,rect:g,yOffset:h}of m){const f=c/2,u=o.y-19.2-h;if(g.attr("class","tag-label-bkg").attr("points",`
      ${n-i/2-L/2},${u+T}  
      ${n-i/2-L/2},${u-T}
      ${o.posWithOffset-i/2-L},${u-f-T}
      ${o.posWithOffset+i/2+L},${u-f-T}
      ${o.posWithOffset+i/2+L},${u+f+T}
      ${o.posWithOffset-i/2-L},${u+f+T}`),$.attr("cy",u).attr("cx",n-i/2+L/2).attr("r",1.5).attr("class","tag-hole"),y==="TB"||y==="BT"){const b=n+h;g.attr("class","tag-label-bkg").attr("points",`
        ${o.x},${b+2}
        ${o.x},${b-2}
        ${o.x+v},${b-f-2}
        ${o.x+v+i+4},${b-f-2}
        ${o.x+v+i+4},${b+f+2}
        ${o.x+v},${b+f+2}`).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),$.attr("cx",o.x+L/2).attr("cy",b).attr("transform","translate(12,12) rotate(45, "+o.x+","+n+")"),l.attr("x",o.x+5).attr("y",b+3).attr("transform","translate(14,14) rotate(45, "+o.x+","+n+")")}}}},"drawCommitTags"),Vr=d(t=>{switch(t.customType??t.type){case p.NORMAL:return"commit-normal";case p.REVERSE:return"commit-reverse";case p.HIGHLIGHT:return"commit-highlight";case p.MERGE:return"commit-merge";case p.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Jr=d((t,r,o,n)=>{const e={x:0,y:0};if(t.parents.length>0){const a=V(t.parents);if(a){const i=n.get(a)??e;return r==="TB"?i.y+P:r==="BT"?(n.get(t.id)??e).y-P:i.x+P}}else return r==="TB"?z:r==="BT"?(n.get(t.id)??e).y-P:0;return 0},"calculatePosition"),Qr=d((t,r,o)=>{var i,c;const n=y==="BT"&&o?r:r+v,e=y==="TB"||y==="BT"?n:(i=E.get(t.branch))==null?void 0:i.pos,a=y==="TB"||y==="BT"?(c=E.get(t.branch))==null?void 0:c.pos:n;if(a===void 0||e===void 0)throw new Error(`Position were undefined for commit ${t.id}`);return{x:a,y:e,posWithOffset:n}},"getCommitPosition"),J=d((t,r,o)=>{if(!x)throw new Error("GitGraph config not found");const n=t.append("g").attr("class","commit-bullets"),e=t.append("g").attr("class","commit-labels");let a=y==="TB"||y==="BT"?z:0;const i=[...r.keys()],c=(x==null?void 0:x.parallelCommits)??!1,m=d(($,g)=>{var u,b;const h=(u=r.get($))==null?void 0:u.seq,f=(b=r.get(g))==null?void 0:b.seq;return h!==void 0&&f!==void 0?h-f:0},"sortKeys");let l=i.sort(m);y==="BT"&&(c&&Nr(l,r,a),l=l.reverse()),l.forEach($=>{var f;const g=r.get($);if(!g)throw new Error(`Commit not found for key ${$}`);c&&(a=Jr(g,y,a,k));const h=Qr(g,a,c);if(o){const u=Vr(g),b=g.customType??g.type,I=((f=E.get(g.branch))==null?void 0:f.index)??0;Kr(n,g,h,u,I,b),Yr(e,g,h,a),Ur(e,g,h,a)}y==="TB"||y==="BT"?k.set(g.id,{x:h.x,y:h.posWithOffset}):k.set(g.id,{x:h.posWithOffset,y:h.y}),a=y==="BT"&&c?a+P:a+P+v,a>R&&(R=a)})},"drawCommits"),Xr=d((t,r,o,n,e)=>{const a=(y==="TB"||y==="BT"?o.x<n.x:o.y<n.y)?r.branch:t.branch,i=d(m=>m.branch===a,"isOnBranchToGetCurve"),c=d(m=>m.seq>t.seq&&m.seq<r.seq,"isBetweenCommits");return[...e.values()].some(m=>c(m)&&i(m))},"shouldRerouteArrow"),q=d((t,r,o=0)=>{const n=t+Math.abs(t-r)/2;if(o>5)return n;if(S.every(a=>Math.abs(a-n)>=10))return S.push(n),n;const e=Math.abs(t-r);return q(t,r-e/5,o+1)},"findLane"),Zr=d((t,r,o,n)=>{var f,u,b,I,j;const e=k.get(r.id),a=k.get(o.id);if(e===void 0||a===void 0)throw new Error(`Commit positions not found for commits ${r.id} and ${o.id}`);const i=Xr(r,o,e,a,n);let c="",m="",l=0,$=0,g=(f=E.get(o.branch))==null?void 0:f.index;o.type===p.MERGE&&r.id!==o.parents[0]&&(g=(u=E.get(r.branch))==null?void 0:u.index);let h;if(i){c="A 10 10, 0, 0, 0,",m="A 10 10, 0, 0, 1,",l=10,$=10;const M=e.y<a.y?q(e.y,a.y):q(a.y,e.y),B=e.x<a.x?q(e.x,a.x):q(a.x,e.x);y==="TB"?e.x<a.x?h=`M ${e.x} ${e.y} L ${B-l} ${e.y} ${m} ${B} ${e.y+$} L ${B} ${a.y-l} ${c} ${B+$} ${a.y} L ${a.x} ${a.y}`:(g=(b=E.get(r.branch))==null?void 0:b.index,h=`M ${e.x} ${e.y} L ${B+l} ${e.y} ${c} ${B} ${e.y+$} L ${B} ${a.y-l} ${m} ${B-$} ${a.y} L ${a.x} ${a.y}`):y==="BT"?e.x<a.x?h=`M ${e.x} ${e.y} L ${B-l} ${e.y} ${c} ${B} ${e.y-$} L ${B} ${a.y+l} ${m} ${B+$} ${a.y} L ${a.x} ${a.y}`:(g=(I=E.get(r.branch))==null?void 0:I.index,h=`M ${e.x} ${e.y} L ${B+l} ${e.y} ${m} ${B} ${e.y-$} L ${B} ${a.y+l} ${c} ${B-$} ${a.y} L ${a.x} ${a.y}`):e.y<a.y?h=`M ${e.x} ${e.y} L ${e.x} ${M-l} ${c} ${e.x+$} ${M} L ${a.x-l} ${M} ${m} ${a.x} ${M+$} L ${a.x} ${a.y}`:(g=(j=E.get(r.branch))==null?void 0:j.index,h=`M ${e.x} ${e.y} L ${e.x} ${M+l} ${m} ${e.x+$} ${M} L ${a.x-l} ${M} ${c} ${a.x} ${M-$} L ${a.x} ${a.y}`)}else c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,$=20,y==="TB"?(e.x<a.x&&(o.type===p.MERGE&&r.id!==o.parents[0]?h=`M ${e.x} ${e.y} L ${e.x} ${a.y-l} ${c} ${e.x+$} ${a.y} L ${a.x} ${a.y}`:h=`M ${e.x} ${e.y} L ${a.x-l} ${e.y} ${m} ${a.x} ${e.y+$} L ${a.x} ${a.y}`),e.x>a.x&&(c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,$=20,o.type===p.MERGE&&r.id!==o.parents[0]?h=`M ${e.x} ${e.y} L ${e.x} ${a.y-l} ${m} ${e.x-$} ${a.y} L ${a.x} ${a.y}`:h=`M ${e.x} ${e.y} L ${a.x+l} ${e.y} ${c} ${a.x} ${e.y+$} L ${a.x} ${a.y}`),e.x===a.x&&(h=`M ${e.x} ${e.y} L ${a.x} ${a.y}`)):y==="BT"?(e.x<a.x&&(o.type===p.MERGE&&r.id!==o.parents[0]?h=`M ${e.x} ${e.y} L ${e.x} ${a.y+l} ${m} ${e.x+$} ${a.y} L ${a.x} ${a.y}`:h=`M ${e.x} ${e.y} L ${a.x-l} ${e.y} ${c} ${a.x} ${e.y-$} L ${a.x} ${a.y}`),e.x>a.x&&(c="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,$=20,o.type===p.MERGE&&r.id!==o.parents[0]?h=`M ${e.x} ${e.y} L ${e.x} ${a.y+l} ${c} ${e.x-$} ${a.y} L ${a.x} ${a.y}`:h=`M ${e.x} ${e.y} L ${a.x-l} ${e.y} ${c} ${a.x} ${e.y-$} L ${a.x} ${a.y}`),e.x===a.x&&(h=`M ${e.x} ${e.y} L ${a.x} ${a.y}`)):(e.y<a.y&&(o.type===p.MERGE&&r.id!==o.parents[0]?h=`M ${e.x} ${e.y} L ${a.x-l} ${e.y} ${m} ${a.x} ${e.y+$} L ${a.x} ${a.y}`:h=`M ${e.x} ${e.y} L ${e.x} ${a.y-l} ${c} ${e.x+$} ${a.y} L ${a.x} ${a.y}`),e.y>a.y&&(o.type===p.MERGE&&r.id!==o.parents[0]?h=`M ${e.x} ${e.y} L ${a.x-l} ${e.y} ${c} ${a.x} ${e.y-$} L ${a.x} ${a.y}`:h=`M ${e.x} ${e.y} L ${e.x} ${a.y+l} ${m} ${e.x+$} ${a.y} L ${a.x} ${a.y}`),e.y===a.y&&(h=`M ${e.x} ${e.y} L ${a.x} ${a.y}`));if(h===void 0)throw new Error("Line definition not found");t.append("path").attr("d",h).attr("class","arrow arrow"+g%G)},"drawArrow"),rt=d((t,r)=>{const o=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach(n=>{const e=r.get(n);e.parents&&e.parents.length>0&&e.parents.forEach(a=>{Zr(o,r.get(a),e,r)})})},"drawArrows"),tt=d((t,r)=>{const o=t.append("g");r.forEach((n,e)=>{var f;const a=e%G,i=(f=E.get(n.name))==null?void 0:f.pos;if(i===void 0)throw new Error(`Position not found for branch ${n.name}`);const c=o.append("line");c.attr("x1",0),c.attr("y1",i),c.attr("x2",R),c.attr("y2",i),c.attr("class","branch branch"+a),y==="TB"?(c.attr("y1",z),c.attr("x1",i),c.attr("y2",R),c.attr("x2",i)):y==="BT"&&(c.attr("y1",R),c.attr("x1",i),c.attr("y2",z),c.attr("x2",i)),S.push(i);const m=n.name,l=U(m),$=o.insert("rect"),g=o.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);g.node().appendChild(l);const h=l.getBBox();$.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-h.width-4-((x==null?void 0:x.rotateCommitLabel)===!0?30:0)).attr("y",-h.height/2+8).attr("width",h.width+18).attr("height",h.height+4),g.attr("transform","translate("+(-h.width-14-((x==null?void 0:x.rotateCommitLabel)===!0?30:0))+", "+(i-h.height/2-1)+")"),y==="TB"?($.attr("x",i-h.width/2-10).attr("y",0),g.attr("transform","translate("+(i-h.width/2-5)+", 0)")):y==="BT"?($.attr("x",i-h.width/2-10).attr("y",R),g.attr("transform","translate("+(i-h.width/2-5)+", "+R+")")):$.attr("transform","translate(-19, "+(i-h.height/2)+")")})},"drawBranches"),et=d(function(t,r,o,n,e){return E.set(t,{pos:r,index:o}),r+=50+(e?40:0)+(y==="TB"||y==="BT"?n.width/2:0),r},"setBranchPosition"),ot=d(function(t,r,o,n){if(Sr(),w.debug("in gitgraph renderer",t+`
`,"id:",r,o),!x)throw new Error("GitGraph config not found");const e=x.rotateCommitLabel??!1,a=n.db;O=a.getCommits();const i=a.getBranchesAsObjArray();y=a.getDirection();const c=cr(`[id="${r}"]`);let m=0;i.forEach((l,$)=>{var I;const g=U(l.name),h=c.append("g"),f=h.insert("g").attr("class","branchLabel"),u=f.insert("g").attr("class","label branch-label");(I=u.node())==null||I.appendChild(g);const b=g.getBBox();m=et(l.name,m,$,b,e),u.remove(),f.remove(),h.remove()}),J(c,O,!1),x.showBranches&&tt(c,i),rt(c,O),J(c,O,!0),ir.insertTitle(c,"gitTitleText",x.titleTopMargin??0,a.getDiagramTitle()),sr(void 0,c,x.diagramPadding,x.useMaxWidth)},"draw"),at={draw:ot},nt=d(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(r=>`
        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }
        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }
        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }
        .label${r}  { fill: ${t["git"+r]}; }
        .arrow${r} { stroke: ${t["git"+r]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles"),ct=nt,it={parser:zr,db:Y,renderer:at,styles:ct};export{it as diagram};
